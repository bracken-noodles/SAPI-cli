#!/usr/bin/env node
"use strict";

var _http = _interopRequireDefault(require("http"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _ajv = _interopRequireDefault(require("ajv"));

var _configJsonSchema = _interopRequireDefault(require("./configJsonSchema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var projectRoot = process.cwd();
var ajv = new _ajv.default();
var validate = ajv.compile(_configJsonSchema.default);
var enterprisePrefix = "/enterprises/{enterpriseId}";
var projectPrefix = enterprisePrefix + "/projects/{projectId}";
var fileStr = "/*\n * This file was generated by npm scr ipt\n * NEVER MODIFY THIS BY HAND.\n * Go to README.md#swagger-api for more information\n */\n\nimport send from \"@dc/request\"\n";

var configFilePath = _path.default.resolve(projectRoot, "./ops.config.js");

if (_fs.default.existsSync(configFilePath)) {
  var swagger = require(configFilePath).swagger;

  var valid = validate(swagger);

  if (!valid) {
    console.error("ops.config.js swagger field config schema wrong. errors:");
    console.error((validate.errors || []).map(function (err, index) {
      return index + 1 + ". " + err.message;
    }).join("\n  "));
  } else {
    var configs = swagger.proxy;
    var count = 0;
    configs.forEach(function (config) {
      parser(config).then(function (_) {
        count += 1;

        if (count === configs.length) {
          _fs.default.writeFileSync(swagger.dist, fileStr, "utf8");
        }
      });
    });
  }
} else {
  console.error("\n  Cannot find ops.config.js at project root.\n  Reference: http://rdk.decobim.com/sapi-cli\n  ");
  process.exit(1);
}

function parser(config) {
  return new Promise(function (resolve, reject) {
    _http.default.get(config.swaggerJSON, function (res) {
      res.setEncoding("utf8");
      var swaggerJSONStr = "";
      res.on("data", function (str) {
        return swaggerJSONStr += str;
      });
      res.on("end", function () {
        var infoObj = JSON.parse(swaggerJSONStr);
        Object.keys(infoObj.paths).forEach(function (path) {
          Object.keys(infoObj.paths[path]).forEach(function (type) {
            var pathWithPrefix = config.prefix + path;
            var query = {};
            var body = {};
            var data = [type, pathWithPrefix, query, body];
            var currentRequestObject = infoObj.paths[path][type];
            (currentRequestObject.parameters || []).forEach(function (param) {
              if (param.in === "query") {
                query[param.name] = param.required;
              } else if (param.in === "body") {
                if (param.schema && param.schema.$ref) {
                  var name = param.schema.$ref.replace("#/definitions/", "");
                  Object.keys(infoObj.definitions[name].properties).forEach(function (property) {
                    body[property] = infoObj.definitions[name].properties[property].type;
                  });
                } else if (param.schema && param.schema.type === "array") {
                  body.isArray = true;
                  body.key = param.name;
                }
              }
            });
            fileStr += getCode(type, currentRequestObject.description, generateRequestIdFromPath(type, path, config.namespace), data);
          });
        });
        resolve();
      });
    });
  });
}

function getCode(type, description, variableName, data) {
  return "\n// ".concat(type, " ").concat(description || "", "\nexport const ").concat(variableName, " = (params) => send(").concat(JSON.stringify(data), ",params)");
}

var isProjectPath = function isProjectPath(path) {
  return path.startsWith(projectPrefix);
};

var isEnterprisePath = function isEnterprisePath(path) {
  return path.startsWith(enterprisePrefix);
};

function generateRequestIdFromPath(method, path, namespace) {
  var mainQueue = namespace ? [namespace] : [];
  var paramQueue = [];
  mainQueue.push(method);

  if (isProjectPath(path)) {
    mainQueue.push("project");
    path = path.replace(projectPrefix, "");
  } else if (isEnterprisePath(path)) {
    mainQueue.push("enterprise");
    path = path.replace(enterprisePrefix, "");
  }

  var pathQueue = path.split("/");
  pathQueue.forEach(function (currentParamater, index) {
    if (/^{\w+}$/.test(currentParamater)) {
      // current is paramater;
      var matchInfo = currentParamater.match(/{(\w+)}/);

      if (!matchInfo[1]) {
        currentParamater = "";
      } else {
        currentParamater = matchInfo[1].replace("Id", "");
      }

      paramQueue.push(currentParamater);

      if (currentParamater !== "mobile") {
        delete pathQueue[index - 1];
      }

      delete pathQueue[index];
    }
  });
  pathQueue.filter(function (path) {
    return !!path;
  });
  mainQueue = mainQueue.concat(pathQueue);

  if (paramQueue.length) {
    mainQueue = mainQueue.concat(["With"], paramQueue);
  }

  var variableName = mainQueue.reduce(function (result, element) {
    if (!element) return result;
    return result + toBigCamel(element);
  });
  return variableName;
}

function toBigCamel(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).replace(/-\w/g, function (match) {
    return match.charAt(1).toUpperCase();
  });
}